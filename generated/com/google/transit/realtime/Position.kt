// Code generated by Wire protocol buffer compiler, do not edit.
// Source: transit_realtime.Position in xyz/ksharma/transport/gtfs_realtime.proto
@file:Suppress("DEPRECATION")

package com.google.transit.realtime

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.missingRequiredFields
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import okio.ByteString

/**
 * A position.
 */
public class Position(
  /**
   * Degrees North, in the WGS-84 coordinate system.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REQUIRED,
    schemaIndex = 0,
  )
  @JvmField
  public val latitude: Float,
  /**
   * Degrees East, in the WGS-84 coordinate system.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REQUIRED,
    schemaIndex = 1,
  )
  @JvmField
  public val longitude: Float,
  /**
   * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
   * This can be the compass bearing, or the direction towards the next stop
   * or intermediate location.
   * This should not be direction deduced from the sequence of previous
   * positions, which can be computed from previous data.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    schemaIndex = 2,
  )
  @JvmField
  public val bearing: Float? = null,
  /**
   * Odometer value, in meters.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    schemaIndex = 3,
  )
  @JvmField
  public val odometer: Double? = null,
  /**
   * Momentary speed measured by the vehicle, in meters per second.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    schemaIndex = 4,
  )
  @JvmField
  public val speed: Float? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Position, Position.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.latitude = latitude
    builder.longitude = longitude
    builder.bearing = bearing
    builder.odometer = odometer
    builder.speed = speed
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Position) return false
    if (unknownFields != other.unknownFields) return false
    if (latitude != other.latitude) return false
    if (longitude != other.longitude) return false
    if (bearing != other.bearing) return false
    if (odometer != other.odometer) return false
    if (speed != other.speed) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + latitude.hashCode()
      result = result * 37 + longitude.hashCode()
      result = result * 37 + (bearing?.hashCode() ?: 0)
      result = result * 37 + (odometer?.hashCode() ?: 0)
      result = result * 37 + (speed?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """latitude=$latitude"""
    result += """longitude=$longitude"""
    if (bearing != null) result += """bearing=$bearing"""
    if (odometer != null) result += """odometer=$odometer"""
    if (speed != null) result += """speed=$speed"""
    return result.joinToString(prefix = "Position{", separator = ", ", postfix = "}")
  }

  public fun copy(
    latitude: Float = this.latitude,
    longitude: Float = this.longitude,
    bearing: Float? = this.bearing,
    odometer: Double? = this.odometer,
    speed: Float? = this.speed,
    unknownFields: ByteString = this.unknownFields,
  ): Position = Position(latitude, longitude, bearing, odometer, speed, unknownFields)

  public class Builder : Message.Builder<Position, Builder>() {
    @JvmField
    public var latitude: Float? = null

    @JvmField
    public var longitude: Float? = null

    @JvmField
    public var bearing: Float? = null

    @JvmField
    public var odometer: Double? = null

    @JvmField
    public var speed: Float? = null

    /**
     * Degrees North, in the WGS-84 coordinate system.
     */
    public fun latitude(latitude: Float): Builder {
      this.latitude = latitude
      return this
    }

    /**
     * Degrees East, in the WGS-84 coordinate system.
     */
    public fun longitude(longitude: Float): Builder {
      this.longitude = longitude
      return this
    }

    /**
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     */
    public fun bearing(bearing: Float?): Builder {
      this.bearing = bearing
      return this
    }

    /**
     * Odometer value, in meters.
     */
    public fun odometer(odometer: Double?): Builder {
      this.odometer = odometer
      return this
    }

    /**
     * Momentary speed measured by the vehicle, in meters per second.
     */
    public fun speed(speed: Float?): Builder {
      this.speed = speed
      return this
    }

    override fun build(): Position = Position(
      latitude = latitude ?: throw missingRequiredFields(latitude, "latitude"),
      longitude = longitude ?: throw missingRequiredFields(longitude, "longitude"),
      bearing = bearing,
      odometer = odometer,
      speed = speed,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Position> = object : ProtoAdapter<Position>(
      FieldEncoding.LENGTH_DELIMITED, 
      Position::class, 
      "type.googleapis.com/transit_realtime.Position", 
      PROTO_2, 
      null, 
      "xyz/ksharma/transport/gtfs_realtime.proto"
    ) {
      override fun encodedSize(`value`: Position): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.latitude)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.longitude)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(3, value.bearing)
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(4, value.odometer)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(5, value.speed)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Position) {
        ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.latitude)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.longitude)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.bearing)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.odometer)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 5, value.speed)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Position) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 5, value.speed)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.odometer)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.bearing)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.longitude)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.latitude)
      }

      override fun decode(reader: ProtoReader): Position {
        var latitude: Float? = null
        var longitude: Float? = null
        var bearing: Float? = null
        var odometer: Double? = null
        var speed: Float? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> latitude = ProtoAdapter.FLOAT.decode(reader)
            2 -> longitude = ProtoAdapter.FLOAT.decode(reader)
            3 -> bearing = ProtoAdapter.FLOAT.decode(reader)
            4 -> odometer = ProtoAdapter.DOUBLE.decode(reader)
            5 -> speed = ProtoAdapter.FLOAT.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Position(
          latitude = latitude ?: throw missingRequiredFields(latitude, "latitude"),
          longitude = longitude ?: throw missingRequiredFields(longitude, "longitude"),
          bearing = bearing,
          odometer = odometer,
          speed = speed,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Position): Position = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): Position = Builder().apply(body).build()
  }
}
