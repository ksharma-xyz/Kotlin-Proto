// Code generated by Wire protocol buffer compiler, do not edit.
// Source: transit_realtime.ReplacementStop in xyz/ksharma/transport/gtfs_realtime.proto
@file:Suppress("DEPRECATION")

package com.google.transit.realtime

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import okio.ByteString

/**
 * NOTE: This field is still experimental, and subject to change. It may be formally adopted in the
 * future.
 */
public class ReplacementStop(
  /**
   * The difference in seconds between the arrival time at this stop and the arrival time at the
   * reference stop. The reference stop is the stop prior to start_stop_selector. If the modification
   * begins at the first stop of the trip, then the first stop of the trip is the reference stop.
   * This value MUST be monotonically increasing and may only be a negative number if the first stop
   * of the original trip is the reference stop.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    schemaIndex = 0,
  )
  @JvmField
  public val travel_time_to_stop: Int? = null,
  /**
   * The replacement stop ID which will now be visited by the trip. May refer to a new stop added
   * using a GTFS-RT Stop message, or to an existing stop defined in the GTFS-Static feed’s stops.txt.
   * The stop MUST have location_type=0 (routable stops).
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    schemaIndex = 1,
  )
  @JvmField
  public val stop_id: String? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ReplacementStop, ReplacementStop.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.travel_time_to_stop = travel_time_to_stop
    builder.stop_id = stop_id
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ReplacementStop) return false
    if (unknownFields != other.unknownFields) return false
    if (travel_time_to_stop != other.travel_time_to_stop) return false
    if (stop_id != other.stop_id) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (travel_time_to_stop?.hashCode() ?: 0)
      result = result * 37 + (stop_id?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (travel_time_to_stop != null) result += """travel_time_to_stop=$travel_time_to_stop"""
    if (stop_id != null) result += """stop_id=${sanitize(stop_id)}"""
    return result.joinToString(prefix = "ReplacementStop{", separator = ", ", postfix = "}")
  }

  public fun copy(
    travel_time_to_stop: Int? = this.travel_time_to_stop,
    stop_id: String? = this.stop_id,
    unknownFields: ByteString = this.unknownFields,
  ): ReplacementStop = ReplacementStop(travel_time_to_stop, stop_id, unknownFields)

  public class Builder : Message.Builder<ReplacementStop, Builder>() {
    @JvmField
    public var travel_time_to_stop: Int? = null

    @JvmField
    public var stop_id: String? = null

    /**
     * The difference in seconds between the arrival time at this stop and the arrival time at the
     * reference stop. The reference stop is the stop prior to start_stop_selector. If the modification
     * begins at the first stop of the trip, then the first stop of the trip is the reference stop.
     * This value MUST be monotonically increasing and may only be a negative number if the first
     * stop of the original trip is the reference stop.
     */
    public fun travel_time_to_stop(travel_time_to_stop: Int?): Builder {
      this.travel_time_to_stop = travel_time_to_stop
      return this
    }

    /**
     * The replacement stop ID which will now be visited by the trip. May refer to a new stop added
     * using a GTFS-RT Stop message, or to an existing stop defined in the GTFS-Static feed’s
     * stops.txt. The stop MUST have location_type=0 (routable stops).
     */
    public fun stop_id(stop_id: String?): Builder {
      this.stop_id = stop_id
      return this
    }

    override fun build(): ReplacementStop = ReplacementStop(
      travel_time_to_stop = travel_time_to_stop,
      stop_id = stop_id,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ReplacementStop> = object : ProtoAdapter<ReplacementStop>(
      FieldEncoding.LENGTH_DELIMITED, 
      ReplacementStop::class, 
      "type.googleapis.com/transit_realtime.ReplacementStop", 
      PROTO_2, 
      null, 
      "xyz/ksharma/transport/gtfs_realtime.proto"
    ) {
      override fun encodedSize(`value`: ReplacementStop): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.travel_time_to_stop)
        size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.stop_id)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ReplacementStop) {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.travel_time_to_stop)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.stop_id)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ReplacementStop) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.stop_id)
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.travel_time_to_stop)
      }

      override fun decode(reader: ProtoReader): ReplacementStop {
        var travel_time_to_stop: Int? = null
        var stop_id: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> travel_time_to_stop = ProtoAdapter.INT32.decode(reader)
            2 -> stop_id = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ReplacementStop(
          travel_time_to_stop = travel_time_to_stop,
          stop_id = stop_id,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ReplacementStop): ReplacementStop = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): ReplacementStop =
        Builder().apply(body).build()
  }
}
