// Code generated by Wire protocol buffer compiler, do not edit.
// Source: protos.PokemonTest in xyz/ksharma/pokemon/pokemontest.proto
@file:Suppress("DEPRECATION")

package xyz.ksharma.pokemon.protoss

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import okio.ByteString

public class PokemonTest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  @JvmField
  public val name: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "pokedexNumber",
    schemaIndex = 1,
  )
  @JvmField
  public val pokedex_number: Int = 0,
  type: List<Type> = emptyList(),
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  @JvmField
  public val maxHp: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<PokemonTest, PokemonTest.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 3,
    adapter = "xyz.ksharma.pokemon.protoss.PokemonTest${'$'}Type#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 2,
  )
  @JvmField
  public val type: List<Type> = immutableCopyOf("type", type)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.name = name
    builder.pokedex_number = pokedex_number
    builder.type = type
    builder.maxHp = maxHp
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PokemonTest) return false
    if (unknownFields != other.unknownFields) return false
    if (name != other.name) return false
    if (pokedex_number != other.pokedex_number) return false
    if (type != other.type) return false
    if (maxHp != other.maxHp) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + pokedex_number.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + maxHp.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """name=${sanitize(name)}"""
    result += """pokedex_number=$pokedex_number"""
    if (type.isNotEmpty()) result += """type=$type"""
    result += """maxHp=$maxHp"""
    return result.joinToString(prefix = "PokemonTest{", separator = ", ", postfix = "}")
  }

  public fun copy(
    name: String = this.name,
    pokedex_number: Int = this.pokedex_number,
    type: List<Type> = this.type,
    maxHp: Int = this.maxHp,
    unknownFields: ByteString = this.unknownFields,
  ): PokemonTest = PokemonTest(name, pokedex_number, type, maxHp, unknownFields)

  public class Builder : Message.Builder<PokemonTest, Builder>() {
    @JvmField
    public var name: String = ""

    @JvmField
    public var pokedex_number: Int = 0

    @JvmField
    public var type: List<Type> = emptyList()

    @JvmField
    public var maxHp: Int = 0

    public fun name(name: String): Builder {
      this.name = name
      return this
    }

    public fun pokedex_number(pokedex_number: Int): Builder {
      this.pokedex_number = pokedex_number
      return this
    }

    public fun type(type: List<Type>): Builder {
      checkElementsNotNull(type)
      this.type = type
      return this
    }

    public fun maxHp(maxHp: Int): Builder {
      this.maxHp = maxHp
      return this
    }

    override fun build(): PokemonTest = PokemonTest(
      name = name,
      pokedex_number = pokedex_number,
      type = type,
      maxHp = maxHp,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<PokemonTest> = object : ProtoAdapter<PokemonTest>(
      FieldEncoding.LENGTH_DELIMITED, 
      PokemonTest::class, 
      "type.googleapis.com/protos.PokemonTest", 
      PROTO_3, 
      null, 
      "xyz/ksharma/pokemon/pokemontest.proto"
    ) {
      override fun encodedSize(`value`: PokemonTest): Int {
        var size = value.unknownFields.size
        if (value.name != "") {
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
        }
        if (value.pokedex_number != 0) {
          size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.pokedex_number)
        }
        size += Type.ADAPTER.asRepeated().encodedSizeWithTag(3, value.type)
        if (value.maxHp != 0) {
          size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.maxHp)
        }
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: PokemonTest) {
        if (value.name != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        }
        if (value.pokedex_number != 0) {
          ProtoAdapter.INT32.encodeWithTag(writer, 2, value.pokedex_number)
        }
        Type.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.type)
        if (value.maxHp != 0) {
          ProtoAdapter.INT32.encodeWithTag(writer, 4, value.maxHp)
        }
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: PokemonTest) {
        writer.writeBytes(value.unknownFields)
        if (value.maxHp != 0) {
          ProtoAdapter.INT32.encodeWithTag(writer, 4, value.maxHp)
        }
        Type.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.type)
        if (value.pokedex_number != 0) {
          ProtoAdapter.INT32.encodeWithTag(writer, 2, value.pokedex_number)
        }
        if (value.name != "") {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        }
      }

      override fun decode(reader: ProtoReader): PokemonTest {
        var name: String = ""
        var pokedex_number: Int = 0
        val type = mutableListOf<Type>()
        var maxHp: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> pokedex_number = ProtoAdapter.INT32.decode(reader)
            3 -> try {
              Type.ADAPTER.tryDecode(reader, type)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> maxHp = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return PokemonTest(
          name = name,
          pokedex_number = pokedex_number,
          type = type,
          maxHp = maxHp,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: PokemonTest): PokemonTest = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): PokemonTest = Builder().apply(body).build()
  }

  public enum class Type(
    override val `value`: Int,
  ) : WireEnum {
    BUG(0),
    DARK(1),
    DRAGON(2),
    ELECTRIC(3),
    FAIRY(4),
    FIGHTING(5),
    FIRE(6),
    FLYING(7),
    GHOST(8),
    GRASS(9),
    GROUND(10),
    ICE(11),
    NORMAL(12),
    POISON(13),
    PSYCHIC(14),
    ROCK(15),
    STEEL(16),
    WATER(17),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Type> = object : EnumAdapter<Type>(
        Type::class, 
        PROTO_3, 
        Type.BUG
      ) {
        override fun fromValue(`value`: Int): Type? = Type.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): Type? = when (`value`) {
        0 -> BUG
        1 -> DARK
        2 -> DRAGON
        3 -> ELECTRIC
        4 -> FAIRY
        5 -> FIGHTING
        6 -> FIRE
        7 -> FLYING
        8 -> GHOST
        9 -> GRASS
        10 -> GROUND
        11 -> ICE
        12 -> NORMAL
        13 -> POISON
        14 -> PSYCHIC
        15 -> ROCK
        16 -> STEEL
        17 -> WATER
        else -> null
      }
    }
  }
}
