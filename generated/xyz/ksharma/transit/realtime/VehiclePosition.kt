// Code generated by Wire protocol buffer compiler, do not edit.
// Source: transit_realtime.VehiclePosition in xyz/ksharma/transport/gtfs_realtime.proto
@file:Suppress("DEPRECATION")

package xyz.ksharma.transit.realtime

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import okio.ByteString

public class VehiclePosition(
  @field:WireField(
    tag = 1,
    adapter = "xyz.ksharma.transit.realtime.TripDescriptor#ADAPTER",
    schemaIndex = 0,
  )
  @JvmField
  public val trip: TripDescriptor? = null,
  @field:WireField(
    tag = 8,
    adapter = "xyz.ksharma.transit.realtime.VehicleDescriptor#ADAPTER",
    schemaIndex = 1,
  )
  @JvmField
  public val vehicle: VehicleDescriptor? = null,
  @field:WireField(
    tag = 2,
    adapter = "xyz.ksharma.transit.realtime.Position#ADAPTER",
    schemaIndex = 2,
  )
  @JvmField
  public val position: Position? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    schemaIndex = 3,
  )
  @JvmField
  public val current_stop_sequence: Int? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    schemaIndex = 4,
  )
  @JvmField
  public val stop_id: String? = null,
  @field:WireField(
    tag = 4,
    adapter = "xyz.ksharma.transit.realtime.VehiclePosition${'$'}VehicleStopStatus#ADAPTER",
    schemaIndex = 5,
  )
  @JvmField
  public val current_status: VehicleStopStatus? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    schemaIndex = 6,
  )
  @JvmField
  public val timestamp: Long? = null,
  @field:WireField(
    tag = 6,
    adapter = "xyz.ksharma.transit.realtime.VehiclePosition${'$'}CongestionLevel#ADAPTER",
    schemaIndex = 7,
  )
  @JvmField
  public val congestion_level: CongestionLevel? = null,
  @field:WireField(
    tag = 9,
    adapter = "xyz.ksharma.transit.realtime.VehiclePosition${'$'}OccupancyStatus#ADAPTER",
    schemaIndex = 8,
  )
  @JvmField
  public val occupancy_status: OccupancyStatus? = null,
  consist: List<CarriageDescriptor> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<VehiclePosition, VehiclePosition.Builder>(ADAPTER, unknownFields) {
  /**
   * Extension source: xyz/ksharma/transport/gtfs_realtime.proto
   */
  @field:WireField(
    tag = 1_007,
    adapter = "xyz.ksharma.transit.realtime.CarriageDescriptor#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 9,
  )
  @JvmField
  public val consist: List<CarriageDescriptor> = immutableCopyOf("consist", consist)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.trip = trip
    builder.vehicle = vehicle
    builder.position = position
    builder.current_stop_sequence = current_stop_sequence
    builder.stop_id = stop_id
    builder.current_status = current_status
    builder.timestamp = timestamp
    builder.congestion_level = congestion_level
    builder.occupancy_status = occupancy_status
    builder.consist = consist
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VehiclePosition) return false
    if (unknownFields != other.unknownFields) return false
    if (trip != other.trip) return false
    if (vehicle != other.vehicle) return false
    if (position != other.position) return false
    if (current_stop_sequence != other.current_stop_sequence) return false
    if (stop_id != other.stop_id) return false
    if (current_status != other.current_status) return false
    if (timestamp != other.timestamp) return false
    if (congestion_level != other.congestion_level) return false
    if (occupancy_status != other.occupancy_status) return false
    if (consist != other.consist) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (trip?.hashCode() ?: 0)
      result = result * 37 + (vehicle?.hashCode() ?: 0)
      result = result * 37 + (position?.hashCode() ?: 0)
      result = result * 37 + (current_stop_sequence?.hashCode() ?: 0)
      result = result * 37 + (stop_id?.hashCode() ?: 0)
      result = result * 37 + (current_status?.hashCode() ?: 0)
      result = result * 37 + (timestamp?.hashCode() ?: 0)
      result = result * 37 + (congestion_level?.hashCode() ?: 0)
      result = result * 37 + (occupancy_status?.hashCode() ?: 0)
      result = result * 37 + consist.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (trip != null) result += """trip=$trip"""
    if (vehicle != null) result += """vehicle=$vehicle"""
    if (position != null) result += """position=$position"""
    if (current_stop_sequence != null) result += """current_stop_sequence=$current_stop_sequence"""
    if (stop_id != null) result += """stop_id=${sanitize(stop_id)}"""
    if (current_status != null) result += """current_status=$current_status"""
    if (timestamp != null) result += """timestamp=$timestamp"""
    if (congestion_level != null) result += """congestion_level=$congestion_level"""
    if (occupancy_status != null) result += """occupancy_status=$occupancy_status"""
    if (consist.isNotEmpty()) result += """consist=$consist"""
    return result.joinToString(prefix = "VehiclePosition{", separator = ", ", postfix = "}")
  }

  public fun copy(
    trip: TripDescriptor? = this.trip,
    vehicle: VehicleDescriptor? = this.vehicle,
    position: Position? = this.position,
    current_stop_sequence: Int? = this.current_stop_sequence,
    stop_id: String? = this.stop_id,
    current_status: VehicleStopStatus? = this.current_status,
    timestamp: Long? = this.timestamp,
    congestion_level: CongestionLevel? = this.congestion_level,
    occupancy_status: OccupancyStatus? = this.occupancy_status,
    consist: List<CarriageDescriptor> = this.consist,
    unknownFields: ByteString = this.unknownFields,
  ): VehiclePosition = VehiclePosition(trip, vehicle, position, current_stop_sequence, stop_id,
      current_status, timestamp, congestion_level, occupancy_status, consist, unknownFields)

  public class Builder : Message.Builder<VehiclePosition, Builder>() {
    @JvmField
    public var trip: TripDescriptor? = null

    @JvmField
    public var vehicle: VehicleDescriptor? = null

    @JvmField
    public var position: Position? = null

    @JvmField
    public var current_stop_sequence: Int? = null

    @JvmField
    public var stop_id: String? = null

    @JvmField
    public var current_status: VehicleStopStatus? = null

    @JvmField
    public var timestamp: Long? = null

    @JvmField
    public var congestion_level: CongestionLevel? = null

    @JvmField
    public var occupancy_status: OccupancyStatus? = null

    @JvmField
    public var consist: List<CarriageDescriptor> = emptyList()

    public fun trip(trip: TripDescriptor?): Builder {
      this.trip = trip
      return this
    }

    public fun vehicle(vehicle: VehicleDescriptor?): Builder {
      this.vehicle = vehicle
      return this
    }

    public fun position(position: Position?): Builder {
      this.position = position
      return this
    }

    public fun current_stop_sequence(current_stop_sequence: Int?): Builder {
      this.current_stop_sequence = current_stop_sequence
      return this
    }

    public fun stop_id(stop_id: String?): Builder {
      this.stop_id = stop_id
      return this
    }

    public fun current_status(current_status: VehicleStopStatus?): Builder {
      this.current_status = current_status
      return this
    }

    public fun timestamp(timestamp: Long?): Builder {
      this.timestamp = timestamp
      return this
    }

    public fun congestion_level(congestion_level: CongestionLevel?): Builder {
      this.congestion_level = congestion_level
      return this
    }

    public fun occupancy_status(occupancy_status: OccupancyStatus?): Builder {
      this.occupancy_status = occupancy_status
      return this
    }

    public fun consist(consist: List<CarriageDescriptor>): Builder {
      checkElementsNotNull(consist)
      this.consist = consist
      return this
    }

    override fun build(): VehiclePosition = VehiclePosition(
      trip = trip,
      vehicle = vehicle,
      position = position,
      current_stop_sequence = current_stop_sequence,
      stop_id = stop_id,
      current_status = current_status,
      timestamp = timestamp,
      congestion_level = congestion_level,
      occupancy_status = occupancy_status,
      consist = consist,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val DEFAULT_CURRENT_STATUS: VehicleStopStatus = VehicleStopStatus.IN_TRANSIT_TO

    @JvmField
    public val ADAPTER: ProtoAdapter<VehiclePosition> = object : ProtoAdapter<VehiclePosition>(
      FieldEncoding.LENGTH_DELIMITED, 
      VehiclePosition::class, 
      "type.googleapis.com/transit_realtime.VehiclePosition", 
      PROTO_2, 
      null, 
      "xyz/ksharma/transport/gtfs_realtime.proto"
    ) {
      override fun encodedSize(`value`: VehiclePosition): Int {
        var size = value.unknownFields.size
        size += TripDescriptor.ADAPTER.encodedSizeWithTag(1, value.trip)
        size += VehicleDescriptor.ADAPTER.encodedSizeWithTag(8, value.vehicle)
        size += Position.ADAPTER.encodedSizeWithTag(2, value.position)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(3, value.current_stop_sequence)
        size += ProtoAdapter.STRING.encodedSizeWithTag(7, value.stop_id)
        size += VehicleStopStatus.ADAPTER.encodedSizeWithTag(4, value.current_status)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(5, value.timestamp)
        size += CongestionLevel.ADAPTER.encodedSizeWithTag(6, value.congestion_level)
        size += OccupancyStatus.ADAPTER.encodedSizeWithTag(9, value.occupancy_status)
        size += CarriageDescriptor.ADAPTER.asRepeated().encodedSizeWithTag(1_007, value.consist)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: VehiclePosition) {
        TripDescriptor.ADAPTER.encodeWithTag(writer, 1, value.trip)
        VehicleDescriptor.ADAPTER.encodeWithTag(writer, 8, value.vehicle)
        Position.ADAPTER.encodeWithTag(writer, 2, value.position)
        ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.current_stop_sequence)
        ProtoAdapter.STRING.encodeWithTag(writer, 7, value.stop_id)
        VehicleStopStatus.ADAPTER.encodeWithTag(writer, 4, value.current_status)
        ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.timestamp)
        CongestionLevel.ADAPTER.encodeWithTag(writer, 6, value.congestion_level)
        OccupancyStatus.ADAPTER.encodeWithTag(writer, 9, value.occupancy_status)
        CarriageDescriptor.ADAPTER.asRepeated().encodeWithTag(writer, 1_007, value.consist)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: VehiclePosition) {
        writer.writeBytes(value.unknownFields)
        CarriageDescriptor.ADAPTER.asRepeated().encodeWithTag(writer, 1_007, value.consist)
        OccupancyStatus.ADAPTER.encodeWithTag(writer, 9, value.occupancy_status)
        CongestionLevel.ADAPTER.encodeWithTag(writer, 6, value.congestion_level)
        ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.timestamp)
        VehicleStopStatus.ADAPTER.encodeWithTag(writer, 4, value.current_status)
        ProtoAdapter.STRING.encodeWithTag(writer, 7, value.stop_id)
        ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.current_stop_sequence)
        Position.ADAPTER.encodeWithTag(writer, 2, value.position)
        VehicleDescriptor.ADAPTER.encodeWithTag(writer, 8, value.vehicle)
        TripDescriptor.ADAPTER.encodeWithTag(writer, 1, value.trip)
      }

      override fun decode(reader: ProtoReader): VehiclePosition {
        var trip: TripDescriptor? = null
        var vehicle: VehicleDescriptor? = null
        var position: Position? = null
        var current_stop_sequence: Int? = null
        var stop_id: String? = null
        var current_status: VehicleStopStatus? = null
        var timestamp: Long? = null
        var congestion_level: CongestionLevel? = null
        var occupancy_status: OccupancyStatus? = null
        val consist = mutableListOf<CarriageDescriptor>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> trip = TripDescriptor.ADAPTER.decode(reader)
            8 -> vehicle = VehicleDescriptor.ADAPTER.decode(reader)
            2 -> position = Position.ADAPTER.decode(reader)
            3 -> current_stop_sequence = ProtoAdapter.UINT32.decode(reader)
            7 -> stop_id = ProtoAdapter.STRING.decode(reader)
            4 -> try {
              current_status = VehicleStopStatus.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            5 -> timestamp = ProtoAdapter.UINT64.decode(reader)
            6 -> try {
              congestion_level = CongestionLevel.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            9 -> try {
              occupancy_status = OccupancyStatus.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            1_007 -> consist.add(CarriageDescriptor.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return VehiclePosition(
          trip = trip,
          vehicle = vehicle,
          position = position,
          current_stop_sequence = current_stop_sequence,
          stop_id = stop_id,
          current_status = current_status,
          timestamp = timestamp,
          congestion_level = congestion_level,
          occupancy_status = occupancy_status,
          consist = consist,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: VehiclePosition): VehiclePosition = value.copy(
        trip = value.trip?.let(TripDescriptor.ADAPTER::redact),
        vehicle = value.vehicle?.let(VehicleDescriptor.ADAPTER::redact),
        position = value.position?.let(Position.ADAPTER::redact),
        consist = value.consist.redactElements(CarriageDescriptor.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): VehiclePosition =
        Builder().apply(body).build()
  }

  public enum class VehicleStopStatus(
    override val `value`: Int,
  ) : WireEnum {
    INCOMING_AT(0),
    STOPPED_AT(1),
    IN_TRANSIT_TO(2),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<VehicleStopStatus> = object : EnumAdapter<VehicleStopStatus>(
        VehicleStopStatus::class, 
        PROTO_2, 
        VehicleStopStatus.INCOMING_AT
      ) {
        override fun fromValue(`value`: Int): VehicleStopStatus? =
            VehicleStopStatus.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): VehicleStopStatus? = when (`value`) {
        0 -> INCOMING_AT
        1 -> STOPPED_AT
        2 -> IN_TRANSIT_TO
        else -> null
      }
    }
  }

  public enum class CongestionLevel(
    override val `value`: Int,
  ) : WireEnum {
    UNKNOWN_CONGESTION_LEVEL(0),
    RUNNING_SMOOTHLY(1),
    STOP_AND_GO(2),
    CONGESTION(3),
    /**
     * NEW
     */
    SEVERE_CONGESTION(4),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<CongestionLevel> = object : EnumAdapter<CongestionLevel>(
        CongestionLevel::class, 
        PROTO_2, 
        CongestionLevel.UNKNOWN_CONGESTION_LEVEL
      ) {
        override fun fromValue(`value`: Int): CongestionLevel? = CongestionLevel.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): CongestionLevel? = when (`value`) {
        0 -> UNKNOWN_CONGESTION_LEVEL
        1 -> RUNNING_SMOOTHLY
        2 -> STOP_AND_GO
        3 -> CONGESTION
        4 -> SEVERE_CONGESTION
        else -> null
      }
    }
  }

  public enum class OccupancyStatus(
    override val `value`: Int,
  ) : WireEnum {
    EMPTY(0),
    MANY_SEATS_AVAILABLE(1),
    FEW_SEATS_AVAILABLE(2),
    STANDING_ROOM_ONLY(3),
    CRUSHED_STANDING_ROOM_ONLY(4),
    FULL(5),
    NOT_ACCEPTING_PASSENGERS(6),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<OccupancyStatus> = object : EnumAdapter<OccupancyStatus>(
        OccupancyStatus::class, 
        PROTO_2, 
        OccupancyStatus.EMPTY
      ) {
        override fun fromValue(`value`: Int): OccupancyStatus? = OccupancyStatus.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): OccupancyStatus? = when (`value`) {
        0 -> EMPTY
        1 -> MANY_SEATS_AVAILABLE
        2 -> FEW_SEATS_AVAILABLE
        3 -> STANDING_ROOM_ONLY
        4 -> CRUSHED_STANDING_ROOM_ONLY
        5 -> FULL
        6 -> NOT_ACCEPTING_PASSENGERS
        else -> null
      }
    }
  }
}
