// Code generated by Wire protocol buffer compiler, do not edit.
// Source: transit_realtime.FeedHeader in xyz/ksharma/transport/gtfs_realtime.proto
@file:Suppress("DEPRECATION")

package xyz.ksharma.transit.realtime

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.missingRequiredFields
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import okio.ByteString

/**
 * Metadata about a feed, included in feed messages.
 */
public class FeedHeader(
  /**
   * Version of the feed specification.
   * The current version is 2.0.  Valid versions are "2.0", "1.0".
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REQUIRED,
    schemaIndex = 0,
  )
  @JvmField
  public val gtfs_realtime_version: String,
  @field:WireField(
    tag = 2,
    adapter = "xyz.ksharma.transit.realtime.FeedHeader${'$'}Incrementality#ADAPTER",
    schemaIndex = 1,
  )
  @JvmField
  public val incrementality: Incrementality? = null,
  /**
   * This timestamp identifies the moment when the content of this feed has been
   * created (in server time). In POSIX time (i.e., number of seconds since
   * January 1st 1970 00:00:00 UTC).
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    schemaIndex = 2,
  )
  @JvmField
  public val timestamp: Long? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<FeedHeader, FeedHeader.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.gtfs_realtime_version = gtfs_realtime_version
    builder.incrementality = incrementality
    builder.timestamp = timestamp
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FeedHeader) return false
    if (unknownFields != other.unknownFields) return false
    if (gtfs_realtime_version != other.gtfs_realtime_version) return false
    if (incrementality != other.incrementality) return false
    if (timestamp != other.timestamp) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + gtfs_realtime_version.hashCode()
      result = result * 37 + (incrementality?.hashCode() ?: 0)
      result = result * 37 + (timestamp?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """gtfs_realtime_version=${sanitize(gtfs_realtime_version)}"""
    if (incrementality != null) result += """incrementality=$incrementality"""
    if (timestamp != null) result += """timestamp=$timestamp"""
    return result.joinToString(prefix = "FeedHeader{", separator = ", ", postfix = "}")
  }

  public fun copy(
    gtfs_realtime_version: String = this.gtfs_realtime_version,
    incrementality: Incrementality? = this.incrementality,
    timestamp: Long? = this.timestamp,
    unknownFields: ByteString = this.unknownFields,
  ): FeedHeader = FeedHeader(gtfs_realtime_version, incrementality, timestamp, unknownFields)

  public class Builder : Message.Builder<FeedHeader, Builder>() {
    @JvmField
    public var gtfs_realtime_version: String? = null

    @JvmField
    public var incrementality: Incrementality? = null

    @JvmField
    public var timestamp: Long? = null

    /**
     * Version of the feed specification.
     * The current version is 2.0.  Valid versions are "2.0", "1.0".
     */
    public fun gtfs_realtime_version(gtfs_realtime_version: String): Builder {
      this.gtfs_realtime_version = gtfs_realtime_version
      return this
    }

    public fun incrementality(incrementality: Incrementality?): Builder {
      this.incrementality = incrementality
      return this
    }

    /**
     * This timestamp identifies the moment when the content of this feed has been
     * created (in server time). In POSIX time (i.e., number of seconds since
     * January 1st 1970 00:00:00 UTC).
     */
    public fun timestamp(timestamp: Long?): Builder {
      this.timestamp = timestamp
      return this
    }

    override fun build(): FeedHeader = FeedHeader(
      gtfs_realtime_version = gtfs_realtime_version ?: throw
          missingRequiredFields(gtfs_realtime_version, "gtfs_realtime_version"),
      incrementality = incrementality,
      timestamp = timestamp,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val DEFAULT_INCREMENTALITY: Incrementality = Incrementality.FULL_DATASET

    @JvmField
    public val ADAPTER: ProtoAdapter<FeedHeader> = object : ProtoAdapter<FeedHeader>(
      FieldEncoding.LENGTH_DELIMITED, 
      FeedHeader::class, 
      "type.googleapis.com/transit_realtime.FeedHeader", 
      PROTO_2, 
      null, 
      "xyz/ksharma/transport/gtfs_realtime.proto"
    ) {
      override fun encodedSize(`value`: FeedHeader): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.gtfs_realtime_version)
        size += Incrementality.ADAPTER.encodedSizeWithTag(2, value.incrementality)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(3, value.timestamp)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: FeedHeader) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.gtfs_realtime_version)
        Incrementality.ADAPTER.encodeWithTag(writer, 2, value.incrementality)
        ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.timestamp)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: FeedHeader) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.timestamp)
        Incrementality.ADAPTER.encodeWithTag(writer, 2, value.incrementality)
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.gtfs_realtime_version)
      }

      override fun decode(reader: ProtoReader): FeedHeader {
        var gtfs_realtime_version: String? = null
        var incrementality: Incrementality? = null
        var timestamp: Long? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> gtfs_realtime_version = ProtoAdapter.STRING.decode(reader)
            2 -> try {
              incrementality = Incrementality.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            3 -> timestamp = ProtoAdapter.UINT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return FeedHeader(
          gtfs_realtime_version = gtfs_realtime_version ?: throw
              missingRequiredFields(gtfs_realtime_version, "gtfs_realtime_version"),
          incrementality = incrementality,
          timestamp = timestamp,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: FeedHeader): FeedHeader = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): FeedHeader = Builder().apply(body).build()
  }

  /**
   * Determines whether the current fetch is incremental.  Currently,
   * DIFFERENTIAL mode is unsupported and behavior is unspecified for feeds
   * that use this mode.  There are discussions on the GTFS Realtime mailing
   * list around fully specifying the behavior of DIFFERENTIAL mode and the
   * documentation will be updated when those discussions are finalized.
   */
  public enum class Incrementality(
    override val `value`: Int,
  ) : WireEnum {
    FULL_DATASET(0),
    DIFFERENTIAL(1),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Incrementality> = object : EnumAdapter<Incrementality>(
        Incrementality::class, 
        PROTO_2, 
        Incrementality.FULL_DATASET
      ) {
        override fun fromValue(`value`: Int): Incrementality? = Incrementality.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): Incrementality? = when (`value`) {
        0 -> FULL_DATASET
        1 -> DIFFERENTIAL
        else -> null
      }
    }
  }
}
