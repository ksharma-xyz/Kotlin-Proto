// Code generated by Wire protocol buffer compiler, do not edit.
// Source: transit_realtime.TranslatedString in xyz/ksharma/transport/gtfs_realtime.proto
@file:Suppress("DEPRECATION")

package xyz.ksharma.transit.realtime

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.missingRequiredFields
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import okio.ByteString

/**
 * An internationalized message containing per-language versions of a snippet of
 * text or a URL.
 * One of the strings from a message will be picked up. The resolution proceeds
 * as follows:
 * 1. If the UI language matches the language code of a translation,
 *    the first matching translation is picked.
 * 2. If a default UI language (e.g., English) matches the language code of a
 *    translation, the first matching translation is picked.
 * 3. If some translation has an unspecified language code, that translation is
 *    picked.
 */
public class TranslatedString(
  translation: List<Translation> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<TranslatedString, TranslatedString.Builder>(ADAPTER, unknownFields) {
  /**
   * At least one translation must be provided.
   */
  @field:WireField(
    tag = 1,
    adapter = "xyz.ksharma.transit.realtime.TranslatedString${'$'}Translation#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  @JvmField
  public val translation: List<Translation> = immutableCopyOf("translation", translation)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.translation = translation
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TranslatedString) return false
    if (unknownFields != other.unknownFields) return false
    if (translation != other.translation) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + translation.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (translation.isNotEmpty()) result += """translation=$translation"""
    return result.joinToString(prefix = "TranslatedString{", separator = ", ", postfix = "}")
  }

  public fun copy(translation: List<Translation> = this.translation, unknownFields: ByteString =
      this.unknownFields): TranslatedString = TranslatedString(translation, unknownFields)

  public class Builder : Message.Builder<TranslatedString, Builder>() {
    @JvmField
    public var translation: List<Translation> = emptyList()

    /**
     * At least one translation must be provided.
     */
    public fun translation(translation: List<Translation>): Builder {
      checkElementsNotNull(translation)
      this.translation = translation
      return this
    }

    override fun build(): TranslatedString = TranslatedString(
      translation = translation,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TranslatedString> = object : ProtoAdapter<TranslatedString>(
      FieldEncoding.LENGTH_DELIMITED, 
      TranslatedString::class, 
      "type.googleapis.com/transit_realtime.TranslatedString", 
      PROTO_2, 
      null, 
      "xyz/ksharma/transport/gtfs_realtime.proto"
    ) {
      override fun encodedSize(`value`: TranslatedString): Int {
        var size = value.unknownFields.size
        size += Translation.ADAPTER.asRepeated().encodedSizeWithTag(1, value.translation)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: TranslatedString) {
        Translation.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.translation)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: TranslatedString) {
        writer.writeBytes(value.unknownFields)
        Translation.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.translation)
      }

      override fun decode(reader: ProtoReader): TranslatedString {
        val translation = mutableListOf<Translation>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> translation.add(Translation.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return TranslatedString(
          translation = translation,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: TranslatedString): TranslatedString = value.copy(
        translation = value.translation.redactElements(Translation.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): TranslatedString =
        Builder().apply(body).build()
  }

  public class Translation(
    /**
     * A UTF-8 string containing the message.
     */
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED,
      schemaIndex = 0,
    )
    @JvmField
    public val text: String,
    /**
     * BCP-47 language code. Can be omitted if the language is unknown or if
     * no i18n is done at all for the feed. At most one translation is
     * allowed to have an unspecified language tag.
     */
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      schemaIndex = 1,
    )
    @JvmField
    public val language: String? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<Translation, Translation.Builder>(ADAPTER, unknownFields) {
    override fun newBuilder(): Builder {
      val builder = Builder()
      builder.text = text
      builder.language = language
      builder.addUnknownFields(unknownFields)
      return builder
    }

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Translation) return false
      if (unknownFields != other.unknownFields) return false
      if (text != other.text) return false
      if (language != other.language) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + text.hashCode()
        result = result * 37 + (language?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """text=${sanitize(text)}"""
      if (language != null) result += """language=${sanitize(language)}"""
      return result.joinToString(prefix = "Translation{", separator = ", ", postfix = "}")
    }

    public fun copy(
      text: String = this.text,
      language: String? = this.language,
      unknownFields: ByteString = this.unknownFields,
    ): Translation = Translation(text, language, unknownFields)

    public class Builder : Message.Builder<Translation, Builder>() {
      @JvmField
      public var text: String? = null

      @JvmField
      public var language: String? = null

      /**
       * A UTF-8 string containing the message.
       */
      public fun text(text: String): Builder {
        this.text = text
        return this
      }

      /**
       * BCP-47 language code. Can be omitted if the language is unknown or if
       * no i18n is done at all for the feed. At most one translation is
       * allowed to have an unspecified language tag.
       */
      public fun language(language: String?): Builder {
        this.language = language
        return this
      }

      override fun build(): Translation = Translation(
        text = text ?: throw missingRequiredFields(text, "text"),
        language = language,
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Translation> = object : ProtoAdapter<Translation>(
        FieldEncoding.LENGTH_DELIMITED, 
        Translation::class, 
        "type.googleapis.com/transit_realtime.TranslatedString.Translation", 
        PROTO_2, 
        null, 
        "xyz/ksharma/transport/gtfs_realtime.proto"
      ) {
        override fun encodedSize(`value`: Translation): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.text)
          size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.language)
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: Translation) {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.text)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.language)
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: Translation) {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.language)
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.text)
        }

        override fun decode(reader: ProtoReader): Translation {
          var text: String? = null
          var language: String? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> text = ProtoAdapter.STRING.decode(reader)
              2 -> language = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Translation(
            text = text ?: throw missingRequiredFields(text, "text"),
            language = language,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: Translation): Translation = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L

      @JvmSynthetic
      public inline fun build(body: Builder.() -> Unit): Translation = Builder().apply(body).build()
    }
  }
}
