// Code generated by Wire protocol buffer compiler, do not edit.
// Source: transit_realtime.UpdateBundle in xyz/ksharma/transport/gtfs_realtime.proto
@file:Suppress("DEPRECATION")

package xyz.ksharma.transit.realtime

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.missingRequiredFields
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import okio.ByteString

/**
 * NEW
 * An addition to the GTFS static bundle
 */
public class UpdateBundle(
  /**
   * the name of the bundle to be updated. This is to allow consumers to update the correct bundle
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REQUIRED,
    schemaIndex = 0,
  )
  @JvmField
  public val GTFSStaticBundle: String,
  /**
   * This field is the update sequence ID. It should commence at 1 for the first update to a static
   * bundle and increment by 1 for each successive update
   * The intent of this field is to allow the consumer to identify updates they may already have
   * processed.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED,
    schemaIndex = 1,
  )
  @JvmField
  public val update_sequence: Int,
  cancelled_trip: List<String> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<UpdateBundle, UpdateBundle.Builder>(ADAPTER, unknownFields) {
  /**
   * repeated field to cancel scheduled trips in the bundle. This is the trip_id to cancel.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    schemaIndex = 2,
  )
  @JvmField
  public val cancelled_trip: List<String> = immutableCopyOf("cancelled_trip", cancelled_trip)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.GTFSStaticBundle = GTFSStaticBundle
    builder.update_sequence = update_sequence
    builder.cancelled_trip = cancelled_trip
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is UpdateBundle) return false
    if (unknownFields != other.unknownFields) return false
    if (GTFSStaticBundle != other.GTFSStaticBundle) return false
    if (update_sequence != other.update_sequence) return false
    if (cancelled_trip != other.cancelled_trip) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + GTFSStaticBundle.hashCode()
      result = result * 37 + update_sequence.hashCode()
      result = result * 37 + cancelled_trip.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """GTFSStaticBundle=${sanitize(GTFSStaticBundle)}"""
    result += """update_sequence=$update_sequence"""
    if (cancelled_trip.isNotEmpty()) result += """cancelled_trip=${sanitize(cancelled_trip)}"""
    return result.joinToString(prefix = "UpdateBundle{", separator = ", ", postfix = "}")
  }

  public fun copy(
    GTFSStaticBundle: String = this.GTFSStaticBundle,
    update_sequence: Int = this.update_sequence,
    cancelled_trip: List<String> = this.cancelled_trip,
    unknownFields: ByteString = this.unknownFields,
  ): UpdateBundle = UpdateBundle(GTFSStaticBundle, update_sequence, cancelled_trip, unknownFields)

  public class Builder : Message.Builder<UpdateBundle, Builder>() {
    @JvmField
    public var GTFSStaticBundle: String? = null

    @JvmField
    public var update_sequence: Int? = null

    @JvmField
    public var cancelled_trip: List<String> = emptyList()

    /**
     * the name of the bundle to be updated. This is to allow consumers to update the correct bundle
     */
    public fun GTFSStaticBundle(GTFSStaticBundle: String): Builder {
      this.GTFSStaticBundle = GTFSStaticBundle
      return this
    }

    /**
     * This field is the update sequence ID. It should commence at 1 for the first update to a
     * static bundle and increment by 1 for each successive update
     * The intent of this field is to allow the consumer to identify updates they may already have
     * processed.
     */
    public fun update_sequence(update_sequence: Int): Builder {
      this.update_sequence = update_sequence
      return this
    }

    /**
     * repeated field to cancel scheduled trips in the bundle. This is the trip_id to cancel.
     */
    public fun cancelled_trip(cancelled_trip: List<String>): Builder {
      checkElementsNotNull(cancelled_trip)
      this.cancelled_trip = cancelled_trip
      return this
    }

    override fun build(): UpdateBundle = UpdateBundle(
      GTFSStaticBundle = GTFSStaticBundle ?: throw missingRequiredFields(GTFSStaticBundle,
          "GTFSStaticBundle"),
      update_sequence = update_sequence ?: throw missingRequiredFields(update_sequence,
          "update_sequence"),
      cancelled_trip = cancelled_trip,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<UpdateBundle> = object : ProtoAdapter<UpdateBundle>(
      FieldEncoding.LENGTH_DELIMITED, 
      UpdateBundle::class, 
      "type.googleapis.com/transit_realtime.UpdateBundle", 
      PROTO_2, 
      null, 
      "xyz/ksharma/transport/gtfs_realtime.proto"
    ) {
      override fun encodedSize(`value`: UpdateBundle): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.GTFSStaticBundle)
        size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.update_sequence)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.cancelled_trip)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: UpdateBundle) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.GTFSStaticBundle)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.update_sequence)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.cancelled_trip)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: UpdateBundle) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.cancelled_trip)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.update_sequence)
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.GTFSStaticBundle)
      }

      override fun decode(reader: ProtoReader): UpdateBundle {
        var GTFSStaticBundle: String? = null
        var update_sequence: Int? = null
        val cancelled_trip = mutableListOf<String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> GTFSStaticBundle = ProtoAdapter.STRING.decode(reader)
            2 -> update_sequence = ProtoAdapter.INT32.decode(reader)
            4 -> cancelled_trip.add(ProtoAdapter.STRING.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return UpdateBundle(
          GTFSStaticBundle = GTFSStaticBundle ?: throw missingRequiredFields(GTFSStaticBundle,
              "GTFSStaticBundle"),
          update_sequence = update_sequence ?: throw missingRequiredFields(update_sequence,
              "update_sequence"),
          cancelled_trip = cancelled_trip,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: UpdateBundle): UpdateBundle = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): UpdateBundle = Builder().apply(body).build()
  }
}
