// Code generated by Wire protocol buffer compiler, do not edit.
// Source: transit_realtime.TripDescriptor in xyz/ksharma/transport/gtfs_realtime.proto
@file:Suppress("DEPRECATION")

package xyz.ksharma.transit.realtime

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import okio.ByteString

public class TripDescriptor(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    schemaIndex = 0,
  )
  @JvmField
  public val trip_id: String? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    schemaIndex = 1,
  )
  @JvmField
  public val route_id: String? = null,
  /**
   * NEW
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    schemaIndex = 2,
  )
  @JvmField
  public val direction_id: Int? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    schemaIndex = 3,
  )
  @JvmField
  public val start_time: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    schemaIndex = 4,
  )
  @JvmField
  public val start_date: String? = null,
  @field:WireField(
    tag = 4,
    adapter = "xyz.ksharma.transit.realtime.TripDescriptor${'$'}ScheduleRelationship#ADAPTER",
    schemaIndex = 5,
  )
  @JvmField
  public val schedule_relationship: ScheduleRelationship? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<TripDescriptor, TripDescriptor.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.trip_id = trip_id
    builder.route_id = route_id
    builder.direction_id = direction_id
    builder.start_time = start_time
    builder.start_date = start_date
    builder.schedule_relationship = schedule_relationship
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TripDescriptor) return false
    if (unknownFields != other.unknownFields) return false
    if (trip_id != other.trip_id) return false
    if (route_id != other.route_id) return false
    if (direction_id != other.direction_id) return false
    if (start_time != other.start_time) return false
    if (start_date != other.start_date) return false
    if (schedule_relationship != other.schedule_relationship) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (trip_id?.hashCode() ?: 0)
      result = result * 37 + (route_id?.hashCode() ?: 0)
      result = result * 37 + (direction_id?.hashCode() ?: 0)
      result = result * 37 + (start_time?.hashCode() ?: 0)
      result = result * 37 + (start_date?.hashCode() ?: 0)
      result = result * 37 + (schedule_relationship?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (trip_id != null) result += """trip_id=${sanitize(trip_id)}"""
    if (route_id != null) result += """route_id=${sanitize(route_id)}"""
    if (direction_id != null) result += """direction_id=$direction_id"""
    if (start_time != null) result += """start_time=${sanitize(start_time)}"""
    if (start_date != null) result += """start_date=${sanitize(start_date)}"""
    if (schedule_relationship != null) result += """schedule_relationship=$schedule_relationship"""
    return result.joinToString(prefix = "TripDescriptor{", separator = ", ", postfix = "}")
  }

  public fun copy(
    trip_id: String? = this.trip_id,
    route_id: String? = this.route_id,
    direction_id: Int? = this.direction_id,
    start_time: String? = this.start_time,
    start_date: String? = this.start_date,
    schedule_relationship: ScheduleRelationship? = this.schedule_relationship,
    unknownFields: ByteString = this.unknownFields,
  ): TripDescriptor = TripDescriptor(trip_id, route_id, direction_id, start_time, start_date,
      schedule_relationship, unknownFields)

  public class Builder : Message.Builder<TripDescriptor, Builder>() {
    @JvmField
    public var trip_id: String? = null

    @JvmField
    public var route_id: String? = null

    @JvmField
    public var direction_id: Int? = null

    @JvmField
    public var start_time: String? = null

    @JvmField
    public var start_date: String? = null

    @JvmField
    public var schedule_relationship: ScheduleRelationship? = null

    public fun trip_id(trip_id: String?): Builder {
      this.trip_id = trip_id
      return this
    }

    public fun route_id(route_id: String?): Builder {
      this.route_id = route_id
      return this
    }

    /**
     * NEW
     */
    public fun direction_id(direction_id: Int?): Builder {
      this.direction_id = direction_id
      return this
    }

    public fun start_time(start_time: String?): Builder {
      this.start_time = start_time
      return this
    }

    public fun start_date(start_date: String?): Builder {
      this.start_date = start_date
      return this
    }

    public fun schedule_relationship(schedule_relationship: ScheduleRelationship?): Builder {
      this.schedule_relationship = schedule_relationship
      return this
    }

    override fun build(): TripDescriptor = TripDescriptor(
      trip_id = trip_id,
      route_id = route_id,
      direction_id = direction_id,
      start_time = start_time,
      start_date = start_date,
      schedule_relationship = schedule_relationship,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TripDescriptor> = object : ProtoAdapter<TripDescriptor>(
      FieldEncoding.LENGTH_DELIMITED, 
      TripDescriptor::class, 
      "type.googleapis.com/transit_realtime.TripDescriptor", 
      PROTO_2, 
      null, 
      "xyz/ksharma/transport/gtfs_realtime.proto"
    ) {
      override fun encodedSize(`value`: TripDescriptor): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.trip_id)
        size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.route_id)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(6, value.direction_id)
        size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.start_time)
        size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.start_date)
        size += ScheduleRelationship.ADAPTER.encodedSizeWithTag(4, value.schedule_relationship)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: TripDescriptor) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.trip_id)
        ProtoAdapter.STRING.encodeWithTag(writer, 5, value.route_id)
        ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.direction_id)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.start_time)
        ProtoAdapter.STRING.encodeWithTag(writer, 3, value.start_date)
        ScheduleRelationship.ADAPTER.encodeWithTag(writer, 4, value.schedule_relationship)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: TripDescriptor) {
        writer.writeBytes(value.unknownFields)
        ScheduleRelationship.ADAPTER.encodeWithTag(writer, 4, value.schedule_relationship)
        ProtoAdapter.STRING.encodeWithTag(writer, 3, value.start_date)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.start_time)
        ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.direction_id)
        ProtoAdapter.STRING.encodeWithTag(writer, 5, value.route_id)
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.trip_id)
      }

      override fun decode(reader: ProtoReader): TripDescriptor {
        var trip_id: String? = null
        var route_id: String? = null
        var direction_id: Int? = null
        var start_time: String? = null
        var start_date: String? = null
        var schedule_relationship: ScheduleRelationship? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> trip_id = ProtoAdapter.STRING.decode(reader)
            5 -> route_id = ProtoAdapter.STRING.decode(reader)
            6 -> direction_id = ProtoAdapter.UINT32.decode(reader)
            2 -> start_time = ProtoAdapter.STRING.decode(reader)
            3 -> start_date = ProtoAdapter.STRING.decode(reader)
            4 -> try {
              schedule_relationship = ScheduleRelationship.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return TripDescriptor(
          trip_id = trip_id,
          route_id = route_id,
          direction_id = direction_id,
          start_time = start_time,
          start_date = start_date,
          schedule_relationship = schedule_relationship,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: TripDescriptor): TripDescriptor = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): TripDescriptor =
        Builder().apply(body).build()
  }

  public enum class ScheduleRelationship(
    override val `value`: Int,
  ) : WireEnum {
    SCHEDULED(0),
    ADDED(1),
    UNSCHEDULED(2),
    CANCELED(3),
    /**
     * KEEP IT
     */
    REPLACEMENT(5),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<ScheduleRelationship> = object :
          EnumAdapter<ScheduleRelationship>(
        ScheduleRelationship::class, 
        PROTO_2, 
        ScheduleRelationship.SCHEDULED
      ) {
        override fun fromValue(`value`: Int): ScheduleRelationship? =
            ScheduleRelationship.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): ScheduleRelationship? = when (`value`) {
        0 -> SCHEDULED
        1 -> ADDED
        2 -> UNSCHEDULED
        3 -> CANCELED
        5 -> REPLACEMENT
        else -> null
      }
    }
  }
}
